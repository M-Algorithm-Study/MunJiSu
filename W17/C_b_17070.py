# 시간복잡도: O(N^2)

import sys

input = sys.stdin.readline

N = int(input())
house = [[0 for _ in range(N)]]
for _ in range(N):
    house.append(list(map(int, input().split())))

# [가로, 세로, 대각선]
dp = [[[0, 0, 0] for _ in range(N)] for _ in range(N + 1)]

# 시작 위치 => 가로 방향
dp[1][1] = [1, 0, 0]

for i in range(1, N + 1):
    for j in range(1, N):
        
        # 이미 (1, 1)은 값이 [1, 0, 0]으로 정해졌으므로 (1, 2)부터 진행하기 위해 예외처리
        if i == j == 1:
            continue
        
        # 빈 칸이라면 파이프 놓을 수 있음
        if house[i][j] == 0:
            
            # 가로 (왼쪽 에서 오른쪽 방향으로 파이프 미는 경우 + 대각선 방향에서 오른쪽으로 파이프 미는 경우)
            dp[i][j][0] = dp[i][j - 1][0] + dp[i][j - 1][2]

            # 세로 (위쪽 칸에서 아래쪽으로 파이프를 미는 경우 + 대각선 방향에서 아래쪽으로 파이프 미는 경우)
            dp[i][j][1] = dp[i - 1][j][2] + dp[i - 1][j][1]

            # 대각선 (왼쪽 상단 대각선 방향에서 파이프를 오른쪽 아래로 밀었을 때의 방법의 수를 합한 것)
            if house[i][j - 1] == house[i - 1][j] == 0:
                dp[i][j][2] = sum(dp[i - 1][j - 1])

print(sum(dp[-1][-1]))

"""
- 가로 : 이전 파이프가 가로, 대각선
- 세로 : 이전 파이프가 세로, 대각선
- 대각선 : 이전 파이프가 가로, 세로, 대각선

- 그림으로 봤을 때, 대각선 파이프를 놓을 때는 해당 칸과 해당 칸의 왼쪽, 위쪽 칸도 벽이 아니어야 함. => house[i][j - 1] == house[i - 1][j] == 0
- 행과 열의 번호는 1부터 시작 => dp[0][0][1] = 1

각각의 칸은 (r, c)
r은 행의 번호, c는 열의 번호

파이프 : 2개의 연속된 칸을 차지하는 크기, 항상 빈 칸만 차지
→, ↘, ↓ 방향
회전은 45도만 회전
가장 처음에 파이프는 (1, 1)와 (1, 2)를 차지하고 있고, 방향은 가로
파이프의 한쪽 끝을 (N, N)로 이동시키는 방법의 개수
"""